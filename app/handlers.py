import logging
import random
import json
import asyncio
from datetime import datetime, date, time as dtime
from typing import Dict, List, Tuple

from telegram import Update
from telegram.ext import CallbackContext

from app.utils import get_message_type, get_message_content, is_admin, get_random_quote


logger = logging.getLogger(__name__)

# Module-level constant for birthday messages
BIRTHDAY_TOASTS = [
    "–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, @{username}! –ü—É—Å—Ç—å —É–¥–∞—á–∞ –≤—Å–µ–≥–¥–∞ —É–ª—ã–±–∞–µ—Ç—Å—è —Ç–µ–±–µ! üéâ",
    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, @{username}! –ñ–µ–ª–∞–µ–º —Ä–∞–¥–æ—Å—Ç–∏, —É—Å–ø–µ—Ö–∞ –∏ –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è! ü•≥",
    "–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º, @{username}! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ç–µ–±–µ —Ç–æ–ª—å–∫–æ —Å—á–∞—Å—Ç—å–µ! üéÇ",
    "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äì –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —Å–∫–∞–∑–∞—Ç—å: @{username}, —Ç—ã –ª—É—á—à–∏–π! –ü—É—Å—Ç—å –≤—Å—ë —Å–±—É–¥–µ—Ç—Å—è! üéà",
    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, @{username}! –ü—É—Å—Ç—å –∂–∏–∑–Ω—å –¥–∞—Ä–∏—Ç —Ç–µ–±–µ —Ç–æ–ª—å–∫–æ —è—Ä–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã! üéä"
]

class BotHandlers:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π Telegram-–±–æ—Ç–∞.
    """

    def __init__(self, db):
        self.db = db
        self.beauty_winners = {}
        # Cache for triggers to reduce DB queries
        self.trigger_cache: Dict[int, Dict[str, Tuple[List[str], str]]] = {}

    async def _send_message(self, chat_id: int, text: str) -> None:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            await self.db.bot.send_message(chat_id=chat_id, text=text)
            logger.info(f"Message sent to chat {chat_id}: {text}")
        except Exception as e:
            logger.error(f"Failed to send message to {chat_id}: {e}")

    async def _load_triggers(self, chat_id: int) -> None:
        """Loads triggers for a chat into cache asynchronously."""
        loop = asyncio.get_running_loop()
        def fetch():
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute("SELECT keyword, response, type FROM triggers WHERE chat_id = %s", (chat_id,))
                    return cur.fetchall()
        rows = await loop.run_in_executor(None, fetch)
        # rows: List of tuples (keyword, json_responses, type)
        cache = {}
        for keyword, response_json, resp_type in rows:
            try:
                responses = json.loads(response_json)
                if not isinstance(responses, list):
                    responses = [response_json]
            except Exception:
                responses = [response_json]
            cache[keyword] = (responses, resp_type)
        self.trigger_cache[chat_id] = cache

    # -----------------------------
    #   –°–ë–†–û–° "–ö–†–ê–°–ê–í–ß–ò–ö–ê –î–ù–Ø"
    # -----------------------------
    async def reset_beauty_winner(self, context: CallbackContext) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç "–∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –¥–Ω—è" –¥–ª—è —á–∞—Ç–∞."""
        chat_id = context.job.chat_id
        if chat_id in self.beauty_winners:
            del self.beauty_winners[chat_id]
        logger.info(f"–ö—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è –¥–ª—è —á–∞—Ç–∞ {chat_id} —Å–±—Ä–æ—à–µ–Ω.")

    # -----------------------------
    #   –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–†
    # -----------------------------
    async def check_birthdays(self, context: CallbackContext) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
        today = date.today()
        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(
                    "SELECT chat_id, user_id, username FROM birthdays WHERE EXTRACT(MONTH FROM birthday) = %s AND EXTRACT(DAY FROM birthday) = %s",
                    (today.month, today.day)
                )
                rows = cur.fetchall()
        if rows:
            for row in rows:
                chat_id, user_id, username = row
                toast = random.choice(BIRTHDAY_TOASTS)
                toast = toast.format(username=username)
                await self._send_message(chat_id, toast)
                logger.info(f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –î–† –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id} –¥–ª—è @{username}")

    # -----------------------------
    #   –£–°–¢–ê–ù–û–í–ö–ê –î–ê–¢–´ –†–û–ñ–î–ï–ù–ò–Ø
    # -----------------------------
    async def handle_birthday_set(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        parts = update.message.text.split()
        if len(parts) != 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: !bd –î–î.–ú–ú.–ì–ì–ì–ì")
            return

        bd_str = parts[1]
        try:
            bd_date = datetime.strptime(bd_str, "%d.%m.%Y").date()
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: !bd 05.04.1998")
            return

        chat_id = update.effective_chat.id
        user_id = update.message.from_user.id
        username = update.message.from_user.username or update.message.from_user.first_name

        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT id FROM birthdays WHERE chat_id = %s AND user_id = %s", (chat_id, user_id))
                row = cur.fetchone()
                if row:
                    cur.execute("UPDATE birthdays SET birthday = %s, username = %s WHERE id = %s",
                                (bd_date, username, row[0]))
                    msg = f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è @{username}! üéÇ"
                else:
                    cur.execute("INSERT INTO birthdays (chat_id, user_id, username, birthday) VALUES (%s, %s, %s, %s)",
                                (chat_id, user_id, username, bd_date))
                    msg = f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è @{username}! üéâ"
                conn.commit()

        await update.message.reply_text(msg)

    # -----------------------------
    #   –õ–û–ì–ò–ö–ê "–ö–ù–ò–ì–ê –ë–†–ê–¢–ê–ù"
    # -----------------------------
    async def handle_kniga_bratan(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–ö–Ω–∏–≥–∞ –±—Ä–∞—Ç–∞–Ω' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É."""
        text = update.message.text.strip().lower() if update.message and update.message.text else ""
        if text == "–∫–Ω–∏–≥–∞ –±—Ä–∞—Ç–∞–Ω":
            username = update.message.from_user.username or update.message.from_user.first_name
            response = get_random_quote()
            if "@{username}" in response:
                response = response.replace("@{username}", f"@{username}")
            else:
                response += f" üòé @{username}"
            await update.message.reply_text(response)

    # -----------------------------
    #   –¢–†–ò–ì–ì–ï–†–´
    # -----------------------------
    async def add_trigger(self, update: Update, context: CallbackContext) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –≤ —á–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
        if not update.message:
            return
        if not await is_admin(context.bot, update.effective_chat.id, update.message.from_user.id):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞! üö´")
            return
        if not update.message.reply_to_message:
            await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞! üîî")
            return
        key = update.message.text[len("!add"):].strip()
        if not key:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á —Ç—Ä–∏–≥–≥–µ—Ä–∞ –ø–æ—Å–ª–µ !add!")
            return
        if len(key) > 128:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è —Ç—Ä–∏–≥–≥–µ—Ä–∞! ‚ö†Ô∏è")
            return
        if key.lower() in {"!add", "!del", "!list", "!bd", "!help", "!talker", "–±–æ–ª—Ç—É–Ω"}:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è! üö´")
            return

        username = update.message.from_user.username or update.message.from_user.first_name
        chat_id = update.effective_chat.id
        replied_message = update.message.reply_to_message
        content_type = get_message_type(replied_message)
        content = get_message_content(replied_message)

        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT id, response, added_by FROM triggers WHERE chat_id = %s AND keyword = %s",
                            (chat_id, key.lower()))
                row = cur.fetchone()
                if row:
                    trigger_id, existing_response, existing_added_by = row
                    try:
                        responses = json.loads(existing_response)
                        if not isinstance(responses, list):
                            responses = [existing_response]
                    except Exception:
                        responses = [existing_response]
                    try:
                        added_by_list = json.loads(existing_added_by)
                        if not isinstance(added_by_list, list):
                            added_by_list = [existing_added_by]
                    except Exception:
                        added_by_list = [existing_added_by]
                    responses.append(content)
                    if username not in added_by_list:
                        added_by_list.append(username)
                    cur.execute("UPDATE triggers SET response = %s, added_by = %s WHERE id = %s",
                                (json.dumps(responses), json.dumps(added_by_list), trigger_id))
                    logger.debug(f"add_trigger: —Ç—Ä–∏–≥–≥–µ—Ä '{key.lower()}' –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç @{username} –≤ —á–∞—Ç {chat_id}")
                    conn.commit()
                    await self._load_triggers(chat_id)
                    await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ '{key}' –¥–æ–±–∞–≤–ª–µ–Ω! üëç")
                else:
                    cur.execute(
                        "INSERT INTO triggers (chat_id, keyword, type, response, added_by) VALUES (%s, %s, %s, %s, %s)",
                        (chat_id, key.lower(), content_type, json.dumps([content]), json.dumps([username]))
                    )
                    logger.debug(f"add_trigger: —Ç—Ä–∏–≥–≥–µ—Ä '{key.lower()}' –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç @{username} –≤ —á–∞—Ç {chat_id}")
                    conn.commit()
                    await self._load_triggers(chat_id)
                    await update.message.reply_text(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä '{key}' –¥–æ–±–∞–≤–ª–µ–Ω! üéâ")

    async def delete_trigger(self, update: Update, context: CallbackContext) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –∏–∑ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
        if not update.message:
            return
        if not await is_admin(context.bot, update.effective_chat.id, update.message.from_user.id):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞! üö´")
            return
        key = update.message.text[len("!del"):].strip()
        if not key:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
        chat_id = update.effective_chat.id
        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM triggers WHERE chat_id = %s AND keyword = %s",
                            (chat_id, key.lower()))
            conn.commit()
        await self._load_triggers(chat_id)
        await update.message.reply_text(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä '{key}' —É–¥–∞–ª—ë–Ω! ‚úÇÔ∏è")

    async def list_triggers(self, update: Update, context: CallbackContext) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ —á–∞—Ç–µ."""
        chat_id = update.effective_chat.id
        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT keyword, added_by FROM triggers WHERE chat_id = %s", (chat_id,))
                rows = cur.fetchall()
        if rows:
            lines = ["üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:"]
            for idx, (keyword, added_by) in enumerate(rows, start=1):
                try:
                    users = json.loads(added_by)
                    user_str = ", ".join(users) if isinstance(users, list) else str(users)
                except Exception:
                    user_str = added_by
                lines.append(f"{idx}. {keyword} (–æ—Ç: {user_str})")
            await update.message.reply_text("\n".join(lines))
        else:
            await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤. üòî")

    async def handle_trigger_invocation(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É."""
        if not update.message or not update.message.text:
            return
        logger.debug(f"handle_trigger_invocation: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{update.message.text}' –æ—Ç {update.message.from_user.id}")
        trigger_key = update.message.text.strip().lower()
        chat_id = update.effective_chat.id
        # Ensure cache is loaded
        await self._load_triggers(chat_id)
        cache = self.trigger_cache.get(chat_id, {})
        entry = cache.get(trigger_key)
        if not entry:
            logger.debug(f"–¢—Ä–∏–≥–≥–µ—Ä '{trigger_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ {chat_id}")
            return
        responses, resp_type = entry
        for resp in responses:
            try:
                if resp_type == "photo":
                    await update.message.reply_photo(photo=resp)
                elif resp_type == "video":
                    await update.message.reply_video(video=resp)
                elif resp_type == "video_note":
                    await update.message.reply_video_note(video_note=resp)
                elif resp_type == "audio":
                    await update.message.reply_audio(audio=resp)
                elif resp_type == "document":
                    await update.message.reply_document(document=resp)
                elif resp_type == "sticker":
                    await update.message.reply_sticker(sticker=resp)
                    await asyncio.sleep(0.5)
                else:
                    await update.message.reply_text(resp)
            except Exception as send_err:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {send_err}")

    async def handle_beauty_trigger(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä '–∫—Ä–∞—Å–∞–≤—á–∏–∫' –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è."""
        text = update.message.text.strip().lower() if update.message and update.message.text else ""
        variants = {"–∫—Ç–æ –∫—Ä–∞—Å–∞–≤—á–∏–∫ —Å–µ–≥–æ–¥–Ω—è", "–∫—Ä–∞—Å–∞–≤—á–∏–∫ —Å–µ–≥–æ–¥–Ω—è", "–∫—Ä–∞—Å–∞–≤—á–∏–∫"}
        if text in variants:
            chat_id = update.effective_chat.id
            today_str = date.today().isoformat()
            if chat_id in self.beauty_winners and self.beauty_winners[chat_id].get("date") == today_str:
                winner = self.beauty_winners[chat_id]
            else:
                admins = await context.bot.get_chat_administrators(chat_id)
                if not admins:
                    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. üö´")
                    return
                winner_admin = random.choice(admins).user
                winner = {
                    "winner_id": winner_admin.id,
                    "username": winner_admin.username or winner_admin.first_name,
                    "date": today_str
                }
                self.beauty_winners[chat_id] = winner
            await update.message.reply_text(f"–°–µ–≥–æ–¥–Ω—è –∫—Ä–∞—Å–∞–≤—á–∏–∫: @{winner['username']}! üåü")

    async def help_command(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥."""
        help_text = (
            "üÜò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
            "1. **–ö–Ω–∏–≥–∞ –±—Ä–∞—Ç–∞–Ω** ‚Äì –ù–∞–ø–∏—à–∏ '–ö–Ω–∏–≥–∞ –±—Ä–∞—Ç–∞–Ω' –∏ –ø–æ–ª—É—á–∏ –º—É–¥—Ä—É—é —Ü–∏—Ç–∞—Ç—É.\n"
            "2. **!add <–∫–ª—é—á>** ‚Äì –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).\n"
            "3. **!del <–∫–ª—é—á>** ‚Äì –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).\n"
            "4. **!list** ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.\n"
            "5. **–ö—Ç–æ –∫—Ä–∞—Å–∞–≤—á–∏–∫ —Å–µ–≥–æ–¥–Ω—è** ‚Äì –£–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∫—Ä–∞—Å–∞–≤—á–∏–∫ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏).\n"
            "6. **!bd <–î–î.–ú–ú.–ì–ì–ì–ì>** ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –í –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –±–æ—Ç –ø–æ–∑–¥—Ä–∞–≤–∏—Ç —Ç–µ–±—è!\n"
            "7. **!talker** –∏–ª–∏ **–±–æ–ª—Ç—É–Ω** ‚Äì –£–∑–Ω–∞—Ç—å, –∫—Ç–æ –±–æ–ª—Ç—É–Ω —Å–µ–≥–æ–¥–Ω—è (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏).\n"
            "8. **!help** ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        )
        await update.message.reply_text(help_text, parse_mode="Markdown")

    # -----------------------------
    #   –ê–ö–¢–ò–í–ù–û–°–¢–¨ (–ë–û–õ–¢–£–ù)
    # -----------------------------
    async def update_activity(self, update: Update, context: CallbackContext) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
        if not update.message or not update.message.text:
            return
        text = update.message.text.strip()
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        if text.startswith("!"):
            return
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if update.message.from_user.is_bot:
            return

        logger.debug(f"update_activity: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}: {text}")

        chat_id = update.effective_chat.id
        user_id = update.message.from_user.id
        today = date.today()

        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        "SELECT id, message_count FROM activity WHERE chat_id = %s AND user_id = %s AND date = %s",
                        (chat_id, user_id, today)
                    )
                    row = cur.fetchone()
                    if row:
                        activity_id, count = row
                        new_count = count + 1
                        cur.execute(
                            "UPDATE activity SET message_count = %s WHERE id = %s",
                            (new_count, activity_id)
                        )
                    else:
                        cur.execute(
                            "INSERT INTO activity (chat_id, user_id, date, message_count) VALUES (%s, %s, %s, %s)",
                            (chat_id, user_id, today, 1)
                        )
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

    async def handle_talker_command(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !talker –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
        chat_id = update.effective_chat.id
        today = date.today()
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        "SELECT user_id, message_count FROM activity WHERE chat_id = %s AND date = %s ORDER BY message_count DESC LIMIT 1",
                        (chat_id, today)
                    )
                    row = cur.fetchone()
            if row:
                user_id, count = row
                member = await context.bot.get_chat_member(chat_id, user_id)
                username = member.user.username or member.user.first_name
                response_text = f"üì¢ –ë–æ–ª—Ç—É–Ω —Å–µ–≥–æ–¥–Ω—è: @{username}\n–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {count}"
                await update.message.reply_text(response_text)
            else:
                await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –±–æ–ª—Ç–∞–ª. ü§ê")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ë–æ–ª—Ç—É–Ω: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
